generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}

enum Role {
  ADMIN
  STAFF
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
}

model Temporder {
  temporder_id String   @id @default(uuid()) // Temporary Order ID
  fullName     String
  email        String   @unique
  phone        String
  placeId      String
  businessName String
  businessType String
  referralCode String?
  password     String
  orderId      String   @unique
  createdAt    DateTime @default(now())
}

model Employees {
  employee_id           String    @id @unique @default(cuid())
  employeeName          String
  employeeEmail         String    @unique
  employeePhoneNumber   String
  employeePassword      String
  otp                   String?
  otpExpiry             DateTime?
  referralCode          String    @unique
  role                  Role      @default(STAFF)
  responsibleEmployeeId String?
  user                  User[]
  createdAt             DateTime  @default(now())
}

model User {
  user_id               String        @id @unique @default(cuid())
  name                  String
  email                 String        @unique
  phoneNumber           String
  password              String
  businessName          String
  businessType          String
  placeId               String
  referralCode          String
  isActive              Boolean       @default(true)
  otp                   String?
  otpExpiry             DateTime?
  subscriptionStartDate DateTime
  subscriptionEndDate   DateTime?
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  dashboard             Dashboard?
  employee_id           String
  employees             Employees     @relation(fields: [employee_id], references: [employee_id], onDelete: Cascade)
  helpdesk              Helpdesk[]
  transaction           Transaction[]
  revenue               Revenue[]
}

model Helpdesk {
  helpdesk_id String       @id @default(cuid())
  name        String
  email       String
  phoneNumber String
  comment     String
  status      TicketStatus @default(OPEN) // Default status is "OPEN"
  resolvedAt  DateTime? // Timestamp for resolution
  user_id     String
  user        User         @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  createdAt   DateTime     @default(now())
}

model Token {
  token_id     String @id @unique @default(cuid())
  refreshToken String
}

model Dashboard {
  dashboard_id String   @id @unique @default(cuid())
  user_id      String   @unique
  user         User     @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  review       Review[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Review {
  review_id    String    @id @unique @default(cuid())
  name         String
  rating       Int
  comment      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  dashboard_id String
  dashboard    Dashboard @relation(fields: [dashboard_id], references: [dashboard_id], onDelete: Cascade)
}

model Transaction {
  transaction_id String   @id @default(uuid())
  user_id        String
  orderId        String
  userName       String
  paymentId      String   @unique
  amount         Int
  type           String
  status         String // "Success", "Failed", "Refunded"
  createdAt      DateTime @default(now())
  employee_id    String
  user           User     @relation(fields: [user_id], references: [user_id])
}

model Revenue {
  revenue_id String   @id @default(uuid())
  user_id    String
  userName   String
  orderId    String
  amount     Int
  status     String // "pending", "paid"
  createdAt  DateTime @default(now())

  user User @relation(fields: [user_id], references: [user_id])
}
